#!/bin/bash

ConfigFolder=${XDG_CONFIG_HOME:-"$HOME/.config"}/bookmenus

VerticalLines=
Monitor=
Font="Mono-12"
BackgroundColor="#1d1f21"
SelectedBackgroundColor="#444"
ForegroundColor="#d8dee9"
SelectedForegroundColor="#268bd2"
Seperator=":"
BookmarksFile=${XDG_CONFIG_HOME:-"$HOME/.config"}/bookmenu/bookmarks
ConfigFile=${XDG_CONFIG_HOME:-"$HOME/.config"}/bookmenu/config
Command="xdg-open"
Prompt="Select a Bookmark"
FuzzyFinder="dmenu"
DefaultBookmarksFile="duckduckgo:duckduckgo.com
ebay:www.ebay.com
paypal:www.paypal.com
amazon:www.amazon.com
youtube:www.youtube.com
wikipedia:www.wikipedia.com
github:www.github.com
reddit:www.reddit.com"
DefaultConfig="# Sets the fuzzy finder to use, currently supported options are fzf and dmenu
# default: dmenu
# FuzzyFinder=dmenu

# Sets the prompt text used by the fuzzy finder prompt
# PromptText=Select a Bookmark

# The monitor to display the prompt on, leave blank to use primary monitor only
# works in dmenu mode
# Monitor=

# Sets the background color of the dmenu prompt
# BackgroundColor=#1d1f21

# Sets the forground color unselected items in the dmenu prompt
# ForegroundColor=#d8dee9

# Sets the background of the selected items in the dmenu prompt
# SelectedBackgroundColor=#444

# Sets the foreground color of the selected item in the dmenu prompt
# SelectedForegroundColor=#268bd2

# Sets the font used by the dmenu prompt
# Font=Mono-12

# Sets the seperator to be used to split the names and the paths in the Bookmark files
# Seperator=:

# Leave this value unset to use a horizontal dmenu prompt, set it to a number to use a vertical prompt
# VerticalLines=

# Sets the location of the Bookmarks file
# BookmarksFile=$HOME/.config/bookmenu/bookmarks

# Sets the command used to open a Bookmark with
# Command=$BROWSER
"

Err() {
  echo "$2" 1>&2
  exit "$1"
}

HelpPage() {
  echo "Future Help Page"
}

GenerateConfig() {
  if [ "$1" = "-g" ]; then
    if [ -d "$ConfigFolder" ]; then
      rm -rf "$ConfigFolder"
      mkdir "$ConfigFolder"
      echo "$DefaultConfig" > "$ConfigFolder/config"
      echo "$DefaultBookmarksFile" > "$ConfigFolder/bookmarks"
    else
      mkdir "$ConfigFolder"
      echo "$DefaultConfig" > "$ConfigFolder/config"
      echo "$DefaultBookmarksFile" > "$ConfigFolder/bookmarks"
    fi
  # Regenerate config file
  elif [ "$1" = "-gc" ]; then
    if [ -d "$ConfigFolder" ]; then
      echo "$DefaultConfig" > "$ConfigFolder/config"
    else
      mkdir "$ConfigFolder"
      echo "$DefaultConfig" > "$ConfigFolder/config"
    fi
  # Regenerate Bookmarks file
  else
    if [ -d "$ConfigFolder" ]; then
      echo "$DefaultConfig" > "$ConfigFolder/config"
    else
      mkdir "$ConfigFolder"
      echo "$DefaultConfig" > "$ConfigFolder/config"
      echo "$DefaultBookmarksFile" > "$ConfigFolder/bookmarks"
    fi
  fi
}

# Handle options using getopts
# getopts cannot handle multiple char options.
# I used a hack to get around that fact but it is not perfect.
# For you need to use bash to get it to work.
# You could also use gnu getopt which allows you to use
# the --ARGUMENT syntax. But it is not posix compliant.
# you might want to consider only using single char arguments.
Options() {
    while getopts ':l:m:p:f:n:s:b:c:a:r:hog:' opt; do
        case "${opt}" in
          l) VerticalLines=${OPTARG} ;;
          m) Monitor=${OPTARG} ;;
          p) Prompt=${OPTARG} ;;

          f) case "${OPTARG}" in
              n) Font=${!OPTIND}; OPTIND=$($OPTIND + 1) ;;
              *) FuzzyFinder=${OPTARG} ;;
            esac ;;

          n) case "${OPTARG}" in
              b) BackgroundColor="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 )) ;;
              f) ForegroundColor=${!OPTIND}; OPTIND=$($OPTIND + 1) ;;
              *) echo "Unknown Option -n${OPTARG}" ;;
            esac ;;

          s) case "${OPTARG}" in
              b) SelectedBackgroundColor=${!OPTIND}; OPTIND=$($OPTIND + 1) ;;
              f) SelectedForegroundColor=${!OPTIND}; OPTIND=$($OPTIND + 1) ;;
              p) Seperator=${!OPTIND}; OPTIND=$($OPTIND + 1) ;;
              *) echo "Unknown Option -s${OPTARG}" ;;
            esac;;
              
          b) BookmarksFile=${OPTARG} ;;

          c) case "${OPTARG}" in
              o) Command=${!OPTIND}; OPTIND=$($OPTIND + 1) ;;
              *) ConfigFile=${OPTARG} ;;
            esac;;

          a) Add=${OPTARG} ;;
          r) Remove=${OPTARG} ;;
          h) HelpPage; exit 0;;
          o) EchoPath=true; OptionSet=;;
          g) GenerateConfig "${OPTARG}"; OptionSet= ;;
          *) Err 1 "Invalid option set" ;;
        esac
    done
    shift "$((OPTIND-1))"
}

Options $@


# Quit with error if bookmarks file doesn't exist
if [ ! -e "$BookmarksFile" ]; then
  Err 1 "Selected bookmarks file does not exist"
fi

# Ignore config file if it doesn't exist
if [ -e "$ConfigFile" ]; then
  # Handle the assignment of config values
  while read -r Line; do
    Key=${Line%%=*}
    Value=${Line##*=}
    case $Key in
      VerticalLines)
        [ -n "$Value" ] && VerticalLines=$Value ;;
      Monitor)
        [ -n "$Value" ] && Monitor=$Value ;;
      Font)
        [ -n "$Value" ] && Font="$Value" ;;
      BackgroundColor)
        [ -n "$Value" ] && BackgroundColor=$Value ;;
      SelectedBackgroundColor)
        [ -n "$Value" ] && SelectedBackgroundColor=$Value ;;
      ForegroundColor)
        [ -n "$Value" ] && ForegroundColor=$Value ;;
      SelectedForegroundColor)
        [ -n "$Value" ] && SelectedForegroundColor=$Value ;;
      Seperator)
        [ -n "$Value" ] && Seperator=$Value ;;
      BookmarksFile)
        [ -n "$Value" ] && BookmarksFile=$Value ;;
      Command)
        [ -n "$Value" ] && Command=$Value ;;
      PromptText)
        [ -n "$Value" ] && Prompt=$Value ;;
      FuzzyFinder)
        [ -n "$Value" ] && FuzzyFinder=$Value ;;
    esac
  done < "$ConfigFile"
fi

# Opens the Selected fuzzy finder with the options set
SelectFinder() {
  case "$FuzzyFinder" in
    dmenu) dmenu -i -p "$Prompt" -fn "$Font" -l "$VerticalLines" \
      -m "$Monitor" -nb "$BackgroundColor" -nf "$ForegroundColor" \
      -sb "$SelectedBackgroundColor" -sf "$SelectedForegroundColor" ;;
    fzf) fzf ;;
    *) Err 1 "$FuzzyFinder in not a supported fuzzy finder"
esac
}

# Selects the path based on the name
SelectPath() {
  xargs -I % grep "%$Seperator" "$BookmarksFile" | sed "s/.*$Seperator//;"
}

# Handle urls to the file system
FileSystem() {
  FullPath=$(echo "$Bookmark" | sed "s|~/|$HOME/|")
  $Command "$FullPath" &
}

# Handle urls to a website
Website() {
  $Command "$Bookmark" &
}

SelectBookmark() {
  Bookmark=$(sort "$BookmarksFile" | sed "s/$Seperator.*//" | SelectFinder \
    | SelectPath)
  if [ -z "$Bookmark" ]; then
    Err 1 "No bookmark selected"
  fi
}

# Add new Bookmark
if [ -n "$Add" ]; then
  echo "$Add" >> "$BookmarksFile"
# Remove Bookmark
elif [ -n "$Remove" ]; then
  sed -i "/$Remove:/d" "$BookmarksFile"
# Echo the path of Selected file
elif [ -n "$EchoPath" ]; then
  SelectBookmark
  echo "$Bookmark" | sed "s|~|$HOME|"
# Normal operation
else
  SelectBookmark
  case "$Bookmark" in
    ~\/*|$HOME*) FileSystem ;;
    *) Website ;;
  esac
fi
