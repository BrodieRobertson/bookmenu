#!/bin/sh
# Splits each line of my bookmarks file into an option to be passed into dmenu,
# the selected value in dmenu is used to load up a new window/tab in the selected
# browser

VERTICALLINES=""
MONITOR=""
FONT=""
BACKGROUNDCOLOR=""
SELECTEDBACKGROUNDCOLOR=""
FOREGROUNDCOLOR=""
SELECTEDFOREGROUNDCOLOR=""
SEPERATOR=""
BOOKMARKS=""
CONFIG=""
COMMAND=""
PROMPT=""
FUZZY_FINDER=""
ECHO_PATH=""

DEFAULTVERTICALLINES=""
DEFAULTMONITOR=""
DEFAULTFONT="Mono-12"
DEFAULTBACKGROUNDCOLOR="#1d1f21"
DEFAULTSELECTEDBACKGROUNDCOLOR="#444"
DEFAULTFOREGROUNDCOLOR="#d8dee9"
DEFAULTSELECTEDFOREGROUNDCOLOR="#268bd2"
DEFAULTSEPERATOR=":"
DEFAULTBOOKMARKS=~/.config/bookmenu/bookmarks
DEFAULTCONFIG=~/.config/bookmenu/config
DEFAULTCOMMAND="$BROWSER"
DEFAULTPROMPT="Select a bookmark"
DEFAULT_FUZZY_FINDER="dmenu"

LASTOPTION=""

helppage() {
  echo "Future Help Page"
}

options='\-(m|l|p|fn|nb|sb|sf|co|c|b|sp|f)'

# Handles the parsing of options to check if they're valid
handleoption() {
  if echo "$1" | grep -Eq $options; then
    if [ -z "$LASTOPTION" ]; then
      LASTOPTION=$var
    elif echo "$LASTOPTION" | grep -Eq $options ; then
      echo "$LASTOPTION requires an argument" && exit
    fi
  elif echo "$1" | grep -Eq '\-h'; then
    helppage
    exit
  elif echo "$1" | grep -Eq '\-o'; then
    ECHO_PATH="true"
  elif echo "$1" | grep -Eq '\-g'; then
    if [ -d ~/.config/bookmenus ]; then
      echo "exists"
    else
      echo "doesn't"
    fi

  else
    echo "Invalid option"
    exit
  fi
}

# Handles the assignment of arguments to the previous option passed in
handleargument() {
  if [ ! -z $LASTOPTION ]; then
    case "$LASTOPTION" in
      -l) VERTICALLINES="$1" ;;
      -m) MONITOR="$1" ;;
      -p) PROMPT="$1" ;;
      -fn) FONT="$1" ;;
      -nb) BACKGROUNDCOLOR="$1" ;;
      -nf) FOREGROUNDCOLOR="$1" ;;
      -sb) SELECTEDBACKGROUNDCOLOR="$1" ;;
      -sf) SELECTEDFOREGROUNDCOLOR="$1" ;;
      -b) BOOKMARKS="$1" ;;
      -c) CONFIG="$1" ;;
      -co) COMMAND="$1" ;;
      -sp) SEPERATOR="$1" ;;
      -f) FUZZY_FINDER="$1" ;;
      *) echo "Invalid option"
  esac
  else
    echo "No option to assign this argument to"
    exit
  fi
  LASTOPTION=""
}

# Loop through each value passed in
for var in "$@"
do
  case "$var" in
    -*) handleoption "$var" ;;
    *) handleargument "$var" ;;
  esac
done

if [ -z $CONFIG ]; then CONFIG=$DEFAULTCONFIG; fi

# Handle the assignment of config values
while read line; do
  value=$(echo $line | sed "s/.*=//")
  case "$line" in
    VERTICAL_LINES=*) VERTICALLINES=$value ;;
    MONITOR=*) MONITOR=$value ;;
    FONT=*) FONT=$value ;;
    BACKGROUND_COLOR=*) BACKGROUNDCOLOR=$value ;;
    SELECTED_BACKGROUND_COLOR=*) SELECTEDBACKGROUNDCOLOR=$value ;;
    FOREGROUND_COLOR=*) FOREGROUNDCOLOR=$value ;;
    SELECTED_FOREGROUND_COLOR=*) SELECTEDFOREGROUNDCOLOR=$value ;;
    SEPERATOR=*) SEPERATOR=$value ;;
    BOOKMARKS_LOCATION=*) BOOKMARKS=$value ;;
    COMMAND=*) COMMAND=$value ;;
    PROMPT_TEXT=*) PROMPT=$value ;;
    FUZZY_FINDER=*) FUZZY_FINDER=$value ;;
  esac
done < $CONFIG

# Fill in any blank spots with default values
if [ -z "$VERTICALLINES" ]; then VERTICALLINES="$DEFAULTVERTICALLINES"; fi
if [ -z "$MONITOR" ]; then MONITOR="$DEFAULTMONITOR"; fi
if [ -z "$FONT" ]; then FONT="$DEFAULTFONT"; fi
if [ -z "$BACKGROUNDCOLOR" ]; then BACKGROUNDCOLOR="$DEFAULTBACKGROUNDCOLOR"; fi
if [ -z "$SELECTEDBACKGROUNDCOLOR" ]; then SELECTEDBACKGROUNDCOLOR="$DEFAULTSELECTEDBACKGROUNDCOLOR"; fi
if [ -z "$FOREGROUNDCOLOR" ]; then FOREGROUNDCOLOR="$DEFAULTFOREGROUNDCOLOR"; fi
if [ -z "$SELECTEDFOREGROUNDCOLOR" ]; then SELECTEDFOREGROUNDCOLOR="$DEFAULTSELECTEDFOREGROUNDCOLOR"; fi
if [ -z "$SEPERATOR" ]; then SEPERATOR="$DEFAULTSEPERATOR"; fi
if [ -z "$BOOKMARKS" ]; then BOOKMARKS="$DEFAULTBOOKMARKS"; fi
if [ -z "$COMMAND" ]; then COMMAND="$DEFAULTCOMMAND"; fi
if [ -z "$PROMPT" ]; then PROMPT="$DEFAULTPROMPT"; fi
if [ -z "$FUZZY_FINDER" ]; then FUZZY_FINDER="$DEFAULT_FUZZY_FINDER"; fi

# Opens the selected fuzzy finder with the options set
fuzzy_find() {
  case "$FUZZY_FINDER" in
    dmenu) dmenu -i -p "$PROMPT" -fn "$FONT" -l "$VERTICALLINES" -m "$MONITOR" -nb "$BACKGROUNDCOLOR" -nf "$FOREGROUNDCOLOR" -sb "$SELECTEDBACKGROUNDCOLOR" -sf "$SELECTEDFOREGROUNDCOLOR" ;;
    fzf) fzf ;;
    *) echo "$FUZZY_FINDER in not a supported fuzzy finder"
esac
}

# Selects the path based on the name
select_path() {
  xargs -I % grep "%$SEPERATOR" $BOOKMARKS | sed "s/.*$SEPERATOR//;"
}

bookmark=$(sort $BOOKMARKS | sed "s/$SEPERATOR.*//" | fuzzy_find | select_path)

if [ -z $bookmark ]; then
  echo "No bookmark selected"
  exit
fi

# Handle urls to the file system
filesystem() {
  if case $bookmark in ~/*) ;; *) false;; esac; then
    $COMMAND $bookmark &
  else
    fullpath="$HOME/$(echo $bookmark | sed "s/~\///")"
    echo "$fullpath"
    $COMMAND $fullpath &
  fi
}

# Handle urls to a website
website() {
  $COMMAND $bookmark &
}

if [ -z $ECHO_PATH ]; then
  case "$bookmark" in
    ~\/*|\/*) filesystem ;;
    *) website ;;
  esac
else
  echo "$bookmark"
fi
