#!/bin/sh
# Splits each line of my Bookmarks file into an option to be passed into dmenu,
# the selected value in dmenu is used to load up a new window/tab in the selected
# browser

ConfigFolder=$HOME/.config/bookmenus

DefaultVerticalLines=""
DefaultMonitor=""
DefaultFont="Mono-12"
DefaultBackgroundColor="#1d1f21"
DefaultSelectedBackgroundColor="#444"
DefaultForegroundColor="#d8dee9"
DefaultSelectedForegroundColor="#268bd2"
DefaultSeperator=":"
DefaultBookmarksFile=$HOME/.config/bookmenu/Bookmarks
DefaultConfig=$HOME/.config/bookmenu/config
DefaultCommand="$BROWSER"
DefaultPrompt="Select a Bookmark"
DefaultFuzzyFinder="dmenu"
DefaultBookmarksFile="duckduckgo:duckduckgo.com
ebay:www.ebay.com
paypal:www.paypal.com
amazon:www.amazon.com
youtube:www.youtube.com
wikipedia:www.wikipedia.com
github:www.github.com
reddit:www.reddit.com"
DefaultConfig="# Sets the fuzzy finder to use, currently supported options are fzf and dmenu
# default: dmenu
# FuzzyFinder=dmenu

# Sets the prompt text used by the fuzzy finder prompt
# PromptText=Select a Bookmark

# The monitor to display the prompt on, leave blank to use primary monitor only
# works in dmenu mode
# Monitor=

# Sets the background color of the dmenu prompt
# BackgroundColor=#1d1f21

# Sets the forground color unselected items in the dmenu prompt
# ForegroundColor=#d8dee9

# Sets the background of the selected items in the dmenu prompt
# SelectedBackgroundColor=#444

# Sets the foreground color of the selected item in the dmenu prompt
# SelectedForegroundColor=#268bd2

# Sets the font used by the dmenu prompt
#Font=Mono-12

# Sets the seperator to be used to split the names and the paths in the Bookmark files
#Seperator=:

# Leave this value unset to use a horizontal dmenu prompt, set it to a number to use a vertical prompt
#VerticalLines=

# Sets the location of the Bookmarks file
# BookmarksFile=~/.config/bookmenu/Bookmarks

# Sets the command used to open a Bookmark with
# Command=$BROWSER
"

LASTOPTION=""

helppage() {
  echo "Future Help Page"
}

options='\-(m|l|p|fn|nb|sb|sf|co|c|b|sp|f|a|r)'

# Handles the parsing of options to check if they're valid
handleoption() {
  if echo "$1" | grep -Eq $options; then
    if [ -z "$LASTOPTION" ]; then
      LASTOPTION=$var
    elif echo "$LASTOPTION" | grep -Eq $options ; then
      echo "$LASTOPTION requires an argument" && exit
    fi
  elif echo "$1" | grep -Eq '\-h'; then
    helppage
    exit
  elif echo "$1" | grep -Eq '\-o'; then
    EchoPath="true"
  elif echo "$1" | grep -Eq '\-(g|gc|gb)'; then
    # Completely regenerate configs
    if [ $1 = "-g" ]; then
      if [ -d $ConfigFolder ]; then
        rm -rf $ConfigFolder
        mkdir $ConfigFolder
        echo "$DefaultConfig" > $ConfigFolder/config
        echo "$DefaultBookmarksFile" > $ConfigFolder/Bookmarks
      else
        mkdir $ConfigFolder
        echo "$DefaultConfig" > $ConfigFolder/config
        echo "$DefaultBookmarksFile" > $ConfigFolder/Bookmarks
      fi
    # Regenerate config file
    elif [ $1 = "-gc" ]; then
      if [ -d $ConfigFolder ]; then
        echo "$DefaultConfig" > $ConfigFolder/config
      else
        mkdir $ConfigFolder
        echo "$DefaultConfig" > $ConfigFolder/config
      fi
    # Regenerate Bookmarks file
    else
      if [ -d $ConfigFolder ]; then
        echo "$DefaultConfig" > $ConfigFolder/config
      else
        mkdir $ConfigFolder
        echo "$DefaultConfig" > $ConfigFolder/config
        echo "$DefaultBookmarksFile" > $ConfigFolder/Bookmarks
      fi
    fi
  else
    echo "Invalid option"
    exit
  fi
}

# Handles the assignment of arguments to the previous option passed in
handleargument() {
  if [ ! -z $LASTOPTION ]; then
    case "$LASTOPTION" in
      -l) VerticalLines="$1" ;;
      -m) Monitor="$1" ;;
      -p) Prompt="$1" ;;
      -fn) Font="$1" ;;
      -nb) BackgroundColor="$1" ;;
      -nf) ForegroundColor="$1" ;;
      -sb) SelectedBackgroundColor="$1" ;;
      -sf) SelectedForegroundColor="$1" ;;
      -b) BookmarksFile="$1" ;;
      -c) Config="$1" ;;
      -co) Command="$1" ;;
      -sp) Seperator="$1" ;;
      -f) FuzzyFinder="$1" ;;
      -a) Add="$1" ;;
      -r) Remove="$1" ;;
      *) echo "Invalid option"
  esac
  else
    echo "No option to assign this argument to"
    exit
  fi
  LASTOPTION=""
}

# Loop through each value passed in
for var in "$@"
do
  case "$var" in
    -*) handleoption "$var" ;;
    *) handleargument "$var" ;;
  esac
done

if [ -z $Config ]; then Config=$DefaultConfig; fi

# Handle the assignment of config values
while read line; do
  value=$(echo $line | sed "s/.*=//")
  case "$line" in
    VerticalLines=*) VerticalLines=$value ;;
    Monitor=*) Monitor=$value ;;
    Font=*) Font=$value ;;
    BackgroundColor=*) BackgroundColor=$value ;;
    SelectedBackgroundColor=*) SelectedBackgroundColor=$value ;;
    ForegroundColor=*) ForegroundColor=$value ;;
    SelectedForegroundColor=*) SelectedForegroundColor=$value ;;
    Seperator=*) Seperator=$value ;;
    BookmarksFile=*) BookmarksFile=$value ;;
    Command=*) Command=$value ;;
    PromptText=*) Prompt=$value ;;
    FuzzyFinder=*) FuzzyFinder=$value ;;
  esac
done < $Config

# Fill in any blank spots with default values
if [ -z "$VerticalLines" ]; then VerticalLines="$DefaultVerticalLines"; fi
if [ -z "$Monitor" ]; then Monitor="$DefaultMonitor"; fi
if [ -z "$Font" ]; then Font="$DefaultFont"; fi
if [ -z "$BackgroundColor" ]; then BackgroundColor="$DefaultBackgroundColor"; fi
if [ -z "$SelectedBackgroundColor" ]; then SelectedBackgroundColor="$DefaultSelectedBackgroundColor"; fi
if [ -z "$ForegroundColor" ]; then ForegroundColor="$DefaultForegroundColor"; fi
if [ -z "$SelectedForegroundColor" ]; then SelectedForegroundColor="$DefaultSelectedForegroundColor"; fi
if [ -z "$Seperator" ]; then Seperator="$DefaultSeperator"; fi
if [ -z "$BookmarksFile" ]; then BookmarksFile="$DefaultBookmarksFile"; fi
if [ -z "$Command" ]; then Command="$DefaultCommand"; fi
if [ -z "$Prompt" ]; then Prompt="$DefaultPrompt"; fi
if [ -z "$FuzzyFinder" ]; then FuzzyFinder="$DefaultFuzzyFinder"; fi

# Opens the selected fuzzy finder with the options set
selectfinder() {
  case "$FuzzyFinder" in
    dmenu) dmenu -i -p "$Prompt" -fn "$Font" -l "$VerticalLines" -m "$Monitor" -nb "$BackgroundColor" -nf "$ForegroundColor" -sb "$SelectedBackgroundColor" -sf "$SelectedForegroundColor" ;;
    fzf) fzf ;;
    *) echo "$FuzzyFinder in not a supported fuzzy finder"
esac
}

# Selects the path based on the name
selectpath() {
  xargs -I % grep "%$Seperator" $BookmarksFile | sed "s/.*$Seperator//;"
}

# Handle urls to the file system
filesystem() {
  if case $Bookmark in ~/*) ;; *) false;; esac; then
    $Command $Bookmark &
  else
    fullpath="$HOME/$(echo $Bookmark | sed "s/~\///")"
    $Command $fullpath &
  fi
}

# Handle urls to a website
website() {
  $Command $Bookmark &
}

selectBookmark() {
  Bookmark=$(sort $BookmarksFile | sed "s/$Seperator.*//" | selectfinder | selectpath)
  if [ -z $Bookmark ]; then
    echo "No Bookmark selected"
    exit
  fi
}

# Add new Bookmark
if [ ! -z $Add ]; then
  echo "$Add" >> $BookmarksFile
# Remove Bookmark
elif [ ! -z $Remove ]; then
  sed -i "/$Remove:/d" $BookmarksFile
# Echo the path of selected file
elif [ ! -z $EchoPath ]; then
  selectBookmark
  echo $Bookmark | sed 's/~/\/home\/brodie/'
# Normal operation
else
  selectBookmark
  case "$Bookmark" in
    ~\/*|\/*) filesystem ;;
    *) website ;;
  esac
fi
