#!/bin/sh
# Splits each Line of my Bookmarks file into an option to be passed into dmenu,
# the selected value in dmenu is used to load up a new window/tab in the selected
# browser

ConfigFolder=$HOME/.config/bookmenus

VerticalLines=""
Monitor=""
Font="Mono-12"
BackgroundColor="#1d1f21"
SelectedBackgroundColor="#444"
ForegroundColor="#d8dee9"
SelectedForegroundColor="#268bd2"
Seperator=":"
BookmarksFile=$HOME/.config/bookmenu/bookmarks
ConfigFile=$HOME/.config/bookmenu/config
Command="$BROWSER"
Prompt="Select a Bookmark"
FuzzyFinder="dmenu"
BookmarksFile="duckduckgo:duckduckgo.com
ebay:www.ebay.com
paypal:www.paypal.com
amazon:www.amazon.com
youtube:www.youtube.com
wikipedia:www.wikipedia.com
github:www.github.com
reddit:www.reddit.com"
DefaultConfig="# Sets the fuzzy finder to use, currently supported options are fzf and dmenu
# default: dmenu
# FuzzyFinder=dmenu

# Sets the prompt text used by the fuzzy finder prompt
# PromptText=Select a Bookmark

# The monitor to display the prompt on, leave blank to use primary monitor only
# works in dmenu mode
# Monitor=

# Sets the background color of the dmenu prompt
# BackgroundColor=#1d1f21

# Sets the forground color unselected items in the dmenu prompt
# ForegroundColor=#d8dee9

# Sets the background of the selected items in the dmenu prompt
# SelectedBackgroundColor=#444

# Sets the foreground color of the selected item in the dmenu prompt
# SelectedForegroundColor=#268bd2

# Sets the font used by the dmenu prompt
#Font=Mono-12

# Sets the seperator to be used to split the names and the paths in the Bookmark files
#Seperator=:

# Leave this value unset to use a horizontal dmenu prompt, set it to a number to use a vertical prompt
#VerticalLines=

# Sets the location of the Bookmarks file
# BookmarksFile=$HOME/.config/bookmenu/bookmarks

# Sets the command used to open a Bookmark with
# Command=$BROWSER
"

HelpPage() {
  echo "Future Help Page"
}

GenerateConfig() {
  if [ $1 = "-g" ]; then
    if [ -d $ConfigFolder ]; then
      rm -rf $ConfigFolder
      mkdir $ConfigFolder
      echo "$DefaultConfig" > $ConfigFolder/config
      echo "$DefaultBookmarksFile" > $ConfigFolder/bookmarks
    else
      mkdir $ConfigFolder
      echo "$DefaultConfig" > $ConfigFolder/config
      echo "$DefaultBookmarksFile" > $ConfigFolder/bookmarks
    fi
  # Regenerate config file
  elif [ $1 = "-gc" ]; then
    if [ -d $ConfigFolder ]; then
      echo "$DefaultConfig" > $ConfigFolder/config
    else
      mkdir $ConfigFolder
      echo "$DefaultConfig" > $ConfigFolder/config
    fi
  # Regenerate Bookmarks file
  else
    if [ -d $ConfigFolder ]; then
      echo "$DefaultConfig" > $ConfigFolder/config
    else
      mkdir $ConfigFolder
      echo "$DefaultConfig" > $ConfigFolder/config
      echo "$DefaultBookmarksFile" > $ConfigFolder/bookmarks
    fi
  fi

}

for Value in "$@"
do
  # Handle options
  case "$Value" in
    # Options requring arguments
    -m|-l|-p|-fn|-nb|-sb|-sf|-co|-c|-b|-sp|-f|-a|-r) OptionSet=$Value ;;
    -h|--help) HelpPage; exit 0;;
    -o) EchoPath=true; OptionSet=;;
    -g|-gc|-gb) GenerateConfig $Value; OptionSet= ;;
  esac

  # Handle arguments
  if [ ! -z $OptionSet ]; then
    case "$OptionSet" in
      -l) VerticalLines=$Value ;;
      -m) Monitor=$Value ;;
      -p) Prompt=$Value ;;
      -fn) Font=$Value ;;
      -nb) BackgroundColor=$Value ;;
      -nf) ForegroundColor=$Value ;;
      -sb) SelectedBackgroundColor=$Value ;;
      -sf) SelectedForegroundColor=$Value ;;
      -b) BookmarksFile=$Value ;;
      -c) Config=$Value ;;
      -co) Command=$Value ;;
      -sp) Seperator=$Value ;;
      -f) FuzzyFinder=$Value ;;
      -a) Add=$Value ;;
      -r) Remove=$Value ;;
      *) echo "Invalid option set" ; exit 1 ;;
  esac
  fi
done

if [ -z $Config ]; then Config=$DefaultConfigFile; fi

# Handle the assignment of config values
while read Line; do
  Key=${Line%%=*}
  Value=${Line##*=}
  case $Key in
    VerticalLines)
      [ -n "$Value" ] && VerticalLines=$Value ;;
    Monitor)
      [ -n "$Value" ] && Monitor=$Value ;;
    Font)
      [ -n "$Value" ] && Font="$Value" ;;
    BackgroundColor)
      [ -n "$Value" ] && BackgroundColor=$Value ;;
    SelectedBackgroundColor)
      [ -n "$Value" ] && SelectedBackgroundColor=$Value ;;
    ForegroundColor)
      [ -n "$Value" ] && ForegroundColor=$Value ;;
    SelectedForegroundColor)
      [ -n "$Value" ] && SelectedForegroundColor=$Value ;;
    Seperator)
      [ -n "$Value" ] && Seperator=$Value ;;
    BookmarksFile)
      [ -n "$Value" ] && BookmarksFile=$Value ;;
    Command)
      [ -n "$Value" ] && Command=$Value ;;
    PromptText)
      [ -n "$Value" ] && Prompt=$Value ;;
    FuzzyFinder)
      [ -n "$Value" ] && FuzzyFinder=$Value ;;
  esac
done < $ConfigFile

# Opens the selected fuzzy finder with the options set
selectfinder() {
  case "$FuzzyFinder" in
    dmenu) dmenu -i -p "$Prompt" -fn "$Font" -l "$VerticalLines" \
      -m "$Monitor" -nb "$BackgroundColor" -nf "$ForegroundColor" \
      -sb "$SelectedBackgroundColor" -sf "$SelectedForegroundColor" ;;
    fzf) fzf ;;
    *) echo "$FuzzyFinder in not a supported fuzzy finder"
esac
}

# Selects the path based on the name
selectpath() {
  xargs -I % grep "%$Seperator" $BookmarksFile | sed "s/.*$Seperator//;"
}

# Handle urls to the file system
filesystem() {
  if case $Bookmark in ~/*) ;; *) false;; esac; then
    $Command $Bookmark &
  else
    fullpath="$HOME/$(echo $Bookmark | sed "s/~\///")"
    $Command $fullpath &
  fi
}

# Handle urls to a website
website() {
  $Command $Bookmark &
}

selectBookmark() {
  Bookmark=$(sort $BookmarksFile | sed "s/$Seperator.*//" | selectfinder | selectpath)
  if [ -z $Bookmark ]; then
    echo "No Bookmark selected"
    exit
  fi
}

# Add new Bookmark
if [ ! -z $Add ]; then
  echo "$Add" >> $BookmarksFile
# Remove Bookmark
elif [ ! -z $Remove ]; then
  sed -i "/$Remove:/d" $BookmarksFile
# Echo the path of selected file
elif [ ! -z $EchoPath ]; then
  selectBookmark
  echo $Bookmark | sed "s|~|$HOME|"
# Normal operation
else
  selectBookmark
  case "$Bookmark" in
    ~\/*|\/*) filesystem ;;
    *) website ;;
  esac
fi
